Тонкости

Многопоточная работа с одной очередью событий может привести к возникновению
ситуаций, когда состояние наблюдаемого объекта меняется до того, как было
обработано предыдущее событие от этого же объекта. Эту ситуацию будем называть
потерей промежуточного состояния.

Например, объект генерирует событие, уведомляющее об изменении собственного
состояния. Объект может измениться два раза, последовтельно сгенерировав два
события. На момент получения обработчиком первого события, состояние
наблюдаемого объекта уже может быть изменено. Если обработчик события использует
состояние наблюдаемого объекта для каких-то расчетов, то высока вероятность
получения ошибочного результата. 

Потеря промежуточного состояния опасна только тогда, когда обработчик события
планирует читать состояние наблюдаемого объекта. В случае, когда события
играют сигнальную роль, потеря промежуточного состояния не представляет
проблемы.

Ошибок, связанных с потерей промежуточного состояния, можно избежать, если
не забывать о ней. Что бы избежать влияния человеческого фактора подсистема
использует приемы, которые позволяют снизить вероятность возникновения
ошибки в связи с потерей промежуточного состояния. Интерфейсы подсистемы
намеренно не содержат методов получения доступа к объекту-источнику.

Первая имплементация событийной подсистемы по умолчанию запрещала отправку
события из потока, отличного от потока обработки очереди событий. Однако
такой подход не оправдал себя, так как значительно усложнял организацию
программы и нивелировал преимущества событийного подхода. Вариант ввода признака
модификации (по аналогии с Observable) был отвергнут, так как при таком подходе
потерянное состояние просто заменяется на потерянное событие. Что из этих двух
вариантов наибоелее важно, может знать только пользовательский код. C позиции
событийной системы наиболее рациональным видится подход, при котором доступ
к источнику события является осознанным выбором разработчика.

Например, событие ValueEvent, генерируется в момент изменения значения.
Событие такого типа может инкапсулировать новое значение. Таким образом,
наблюдатель гарантировано получает все изменения, включая промежуточные, даже
если они на момент получения события уже недоступны через объект-источник. 


Объекты подсистемы событий

EventType - тип события. Экземпляр данного класса однозначно идентифицирует тип
события. Тип события предусматривает методы подписки и отписки от получения
событий данного типа. Тип события используется как часть события и может быть
расширен дополнительными методами и атрибутами.

Event - объект события. Источник события информирует наблюдателей о
возникновении события специфического типа посредством объекта события. Объект
события инкапсулирует тип и источник события. Класс события конкретного типа
может быть расширен дополнительными методами и атрибутами.

EventDispatcher - диспетчер событий. Экземпляр данного класса обеспечивает
взаимодействие объекта-источника с подсистемой событий. Объект-источник
событий использует тип события и диспетчер для формирования и передачи нового
события на обработку в очередь. 

EventQueue - очередь событий. Объекты данного типа представляют собой
специфическую реализации механизма оповещения. 

CompositeEventType - композитный тип события предназначен для упрощения
обработки нескольких событий в соответствии с определенным правилом. Каждый
такого типа отлавливает несколько других типов событий и генерирует собственное
событие в случае, если требуемые условия выполнены.