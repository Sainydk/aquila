/**
 * Реализация терминала QUIK.
 * <p>
 * Настройки экспорта таблиц:
 * <p>
 * Общие для всех таблиц:<br>
 * <b>С заголовками столбцов</b> - включена<br>
 * <b>Формальные заголовки</b> - включена<br>
 * <b>Выводить пустые ячейки вместо нулей</b> - ВЫключена<br>
 * <p>
 * <b>ВНИМАНИЕ:</b> QUIK->Настройки->Основные, Программа->Экспорт данных.
 * Установить "При выдаче целиком таблицы, секунд" значение 120. Иначе высока
 * вероятность остановки передачи данных на всех-сделках. В соседнем поле
 * указать таймаут для строки 60 секунд.
 * <p>
 * Идентификация атрибутов выполняется по заголовку. Это очень удобно с точки
 * зрения пользователя: он имеет возможность просто добавить все имеющиеся
 * атрибуты в таблицу и не заморачиваться порядком следования колонок, как в
 * случае идентификации по номеру. В связи с этим, в экспорте обязательно
 * включение галки С заголовками столбцов. Это правило справедливо
 * для всех таблиц.
 * <p>
 * Идентификация выполняется по формальным заголовкам. Так что для всех таблиц 
 * необходимо включать галку Формальные заголовки.
 * <p>
 * Нет никакой возможности определить является ли нулевое значение актуальным
 * значение атрибута или это недоступное значение. Но если включить галку
 * Выводить пустые ячейки вместо нулей, то для тех значений, для которых
 * нулевые значения имеют смысл (например, текущая позиция, вариационная маржа,
 * и т.п.), так же будут передаваться пустые ячейки, что приведет к
 * некорректному отражению данных в объектах терминала. По этому, галка
 * Выводить пустые ячейки вместо нулей должна быть выключена для всех
 * таблиц. 
 * <p>
 * <b>ИНСТРУМЕНТЫ</b>: Из-за отсутствия в большинстве таблиц полей, позволяющих
 * сформировать полный дескриптор инструмента, невозможно напрямую сопоставить
 * ряд такой таблицы с инструментом. Для решения этой задачи используется два
 * способа определения инструмента:<br>
 * 1) по паре код инструмента и код класса для таблиц заявок и сделок<br>
 * 2) по краткому наименованию для таблиц позиций<br>
 * <p>
 * Для обеспечения этой возможности дескрипторы инструментов предварительно
 * регистрируются в специальном хранилище, которое обеспечивает доступ к
 * дескриптору по краткому наименованию или паре кодов инструмента и класса
 * инструмента. 
 * <p>
 * <b>ПОРТФЕЛИ и СЧЕТА: </b> Терминал создает отдельный портфель для каждой
 * строки из таблиц Портфель по бумагам и Таблица ограничений по
 * клиентским счетам (фьючерсы) (далее - портфель по деривативам). Портфели по
 * бумагам идентифицируются по комбинации кодов фирмы и клиента. Портфели по
 * деривативам идентифицируются по комбинации кода фирмы и кода торгового счета.
 * При этом, коду счета (имеется в виду объект типа
 * {@link ru.prolib.aquila.core.BusinessEntities.Account Account}) соответствует
 * код фирмы , а суб-коду объекта счета соответствует код клиента для портфеля
 * по бумагам или код торгового счета для портфеля по деривативам. Вторичный
 * суб-код объекта счета используется только при работе с позициями и заявками.
 * При запросе объекта портфеля вторичный суб-код игнорируется.
 * <p>
 * ?????? А как же позиции такого портфеля? Ведь при запросе позиции через
 * портфель счет не указывается. А если позиции по разным счетам депо ???
 * <p>
 * Для совершения операций с бумагами необходимо знать код счета депо. Однако
 * таблица <b>Портфель по бумагам</b> не содержит аналитического разреза по
 * кодам счетов депо, связанных с данным клиентом. Это не позволяет заводить
 * отдельные объекты портфеля для каждого счета депо. В связи с этим, каждому
 * портфелю по бумагам соответствует комбинация кода фирмы и кода клиента.
 * Третий компонент объекта счета (вторичный суб-код) используется только для
 * заявок и позиций. Вторичный суб-код в объекте счета является обязательным для
 * этих объектов. В случае отсутствия вторичного суб-кода, попытка выставить
 * заявку завершится неудачей. Полностью заполненный данными объект-счета (то
 * есть все три кода) всегда обновляется для заявок и позиций, по которым была
 * получена информация из QUIK.
 * <p>
 * Важно помнить что в портфеле хранится неполный объект-счета. Сравнение
 * экземпляров счета из позиции (или заявки) и счета из портфеля будут всегда
 * давать несовпадение.
 * <p>
 * <b>ПРИМЕЧАНИЯ:</b> замечено непонятное поведение для таблицы портфелей по
 * бумагам. В моменты между открытием и закрытием позиций приходят некорректные
 * данные о балансе и доступных средствах. Ощущение такое, что суммируется или
 * вычитается не вовремя и в этом несогласованном состоянии передается
 * DDE-серверу. Например, средства = 2600, при открытии лонга LHOH по рыночной
 * получаем тик средства 400, после чего возвращается на 2600. При закрытии
 * наоборот: увеличивается почти в два раза на несколько тиков, затем
 * нормализуется. Все ничего, если не вешать на эти данные условные
 * срабатывания. Где еще аналогичные глюки вылезут, неизвестно. 
 * <p>
 * <b>ЗАЯВКИ:</b> TODO: по заявкам помимо проблем определения счета и
 * инструмента, так же недоступна информация о фактическом объеме средств по
 * заявке. Идеи: для filled и killed нужно проверять совпадение исполненной
 * части (Qty - QtyRest) по сделкам. Заявку можно перевести в соответствующий
 * статус только в том случае, если исполненное количество из таблицы заявок
 * и исполненное количество по таблице сделок совпадает. Исполненный объем
 * нужно так же считать по сделкам заявки. Так как порядок получения данных по
 * сделкам и заявкам неопределен, вышеописанную работу нужно выполнять каждый
 * раз при получении сделки или при обновлении заявки при обработке ряда таблицы
 * заявок. Эта работа должна выполняться до тех пор, пока заявка не окажется в
 * одном из финальных статусов. 
 * <p>
 * 2012-09-06<br>
 * $Id$
 */
package ru.prolib.aquila.quik;