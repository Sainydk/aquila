/**
 * Сборка объектов бизнес-модели.
 * <p>
 * Данный пакет содержит компоненты, обеспечивающие согласование атрибутов
 * объектов бизнес-модели на основе данных кэша DDE. Механизм сборки
 * представляет собой автономный сервис, не подразумевающий доступа к
 * компонентам извне. Работа с подсистемой сборки предусматривает только
 * запуск и останов сервиса и осуществляется через фасад.
 * <p>
 * Поскольку согласование инициируется по событию, это означает что сборка
 * объектов может генерировать сколько угодно событий, так как их обработка не
 * начнется раньше, чем завершится согласование (то есть, обработка текущего
 * события). 
 * <p>
 * Но это так же означает, что соответствующее событие должно согласовывать
 * все без исключения связанные объекты в один этап, что бы между обработками
 * кэш данных не был обновлен. Например, при согласовании заявок, согласовании
 * позиций должно быть выполнено в один этап, но не быть реакцией другого
 * обработчика событий.
 * <p>
 * Заявки, стоп-заявки и сделки передаются торговым терминалом за период с
 * начала торгового дня. Но терминал может быть запущен в работу в любое время
 * для. Если не обеспечить дополнительную фильтрацию, то генерация полного цикла
 * событий по ранним объектам скорее всего даст некорректную реакцию. Например,
 * терминал  запущен в обед, но в соответствующей таблице есть утренние заявки.
 * Если торговая стратегия опирается на обработку событий заявок, то при
 * получении события исполненния утренней заявки может быть принято
 * несвоевременное решение. Что бы исключить генерацию событий по ранним
 * объектам, сборка подразумевает дополнительную фильтрацию объектов.
 * <p>
 * <b>СБОРКА ЗАЯВОК:</b>
 * <p>
 * Stage 1: Для заявок, которые создаются на основе кэш-записи таблицы заявок
 * предусмотрен следующий алгоритм. После первичного заполнения атрибутов
 * заявка регистрируется в хранилище, для нее устанавливается признак
 * доступности и генерируется событие о доступности новой заявки. В конце этапа
 * признак изменений сбрасывается.
 * <p>
 * Stage 2: Далее, для заявки выставляется статус ACTIVE и выполняется проверка
 * времени заявки, которое соответствует времени активации. Если время активации
 * больше или равно времени запуска сборщика, то инициируется обработка
 * изменения атрибутов, которая приводит к генерацию события о регистрации
 * заявки. Если время заявки меньше времени запуска сборщика, то это ранняя
 * заявка и событие регистрации по ней не выставляется. В конце этапа признак
 * изменений сбрасывается.
 * <p>
 * Stage 3: После этого выполняется сведение по сделкам. При этом, событие по
 * сделке не генерируется, если время сделки меньше времени запуска сборщика
 * (TODO: здесь может быть неточность по времени из-за того, что время сделки с
 * точностью до секунд, а время запуска до миллисекунд). 
 * <p>
 * Stage 4: После сведения по сделкам выполняется корректировка статуса заявки
 * по кэш-записи и текущему состоянию заявки.
 * <p>
 * Stage 5: Генерируется событие об изменении заявки, если время заявки не
 * раньше времени запуска сборщика. В конце работы признак изменений
 * сбрасывается. 
 * <p>
 * <b>СБОРКА СТОП-ЗАЯВОК:</b>
 * <p>
 * TODO: 
 */
package ru.prolib.aquila.quik.assembler;