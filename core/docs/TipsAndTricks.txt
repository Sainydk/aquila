Содержание:
- Не используй System.exit()
- Мультипоточная обработка
- Мультипоточная обработка (Источники данных)
- Мультипоточная обработка и синхронная обработка событий
- Новые типы заявок
- Новый класс заявки


--------------------------------------------------------------------------------
- Не используй System.exit()

Комбинация System.exit() и Runtime.getRuntime().addShutdownHook() для завершения
работы программы, использующей данный фреймворк, чревата ошибками завершения
работы. Вызов System.exit() приводит к игнорированию блока finally, которые
активно используются для снятия блокировок. Неснятая блокировка приведет к
невозможности захватить лок в процедуре завершения (например, Terminal.close()).
Фактически, вызывать System.exit() можно только после закрытия всех ресурсов
фреймворка.

--------------------------------------------------------------------------------
- Мультипоточная обработка

При работе с терминалом из нескольких потоков синхронизацию типа ReentrantLock и
synchronized следует использовать с большой осторожностью, так как можно
получить взаимную блокировку потоков. Если функция потока использует
синхронизацию в целях гарантии консистентного состояния и при этом
осуществляется вызов метода некоторого внешнего объекта, то не следует
осуществлять этот вызов внутри блока синхронизации. Вместо этого следует
использовать временную переменную для сохранения ссылки на объект и осуществить
вызов с использованием этой переменной.

Например, имеется некий поток, осуществляющий чтение последовательности сделок
из файла и осуществляющий перенаправление этих сделок некоторому абстрактному
потребителю. Этот поток представлен в виде сервиса и снабжен методом, который
позволяет остановить чтение потока и трансляцию сделок. Поскольку этот сервис
подразумевает возможность обращения из нескольких потоков, то для гарантии
согласованного состояния (сервис в работе/сервис остановлен) используются блоки
синхронизации. Один для изменения состояния сервиса

	public void stopReadingUpdates() {
		lock.lock();
		try {
			if ( started ) {
				started = false;
			}
		} finally {
			lock.unlock();
		}
	}

другой для проверки этого состояния

	public void consumeUpdate(L1Update update, long sequenceID) {
		lock.lock();
		try {
			if ( started ) {
				consumer.consume(update);
			}
		} finally {
			lock.unlock();
		}
	}

Проблема данной реализации в том, что потребитель, которому передается
управление, может обратиться к ресурсу, который заблокирован другим потоком и
который из этого же потока пытаться остановить сервис вызовом метода
stopReadingUpdates. Таким образом, два потока заблокируют друг друга навсегда:
один поток будет ожидать освобождения ресурса, занимая лок, который нужен для
освобождения ресурса. А второй поток не сможет продолжить работу что бы
освободить лок, так как будет ожидать освобождения лока при входе в метод
stopReadingUpdates.

Что бы решить данную проблему следует использовать временную переменную ВСЕГДА,
когда управление передается внешнему объекту. Такой подход позволит осуществлять
любой рефакторинг, не беспокоясь о проблемах синхронизации не связанных между
собой компонентов системы. Безопасная с точки зрения блокировок реализация
метода consumeUpdate с использованием временной переменно может выглядеть
следующим образом:

	public void consumeUpdate(L1Update update, long sequenceID) {
		L1UpdateConsumer dummy = null;
		lock.lock();
		try {
			if ( started ) {
				dummy = consumer;
			}
		} finally {
			lock.unlock();
		}
		if ( dummy != null ) {
			dummy.consume(update);
		}
	}

Отдельно следует упомянуть ситуацию, когда появляется желание расширить границы
блокировки с целью обеспечить сохранение последовательности обработки данных.
Такая ситуация применима и к рассмотренному выше примеру поставщик-потребитель.
Если сохранение последовательности обновлений критично и нет уверенности, что
обновления будут подаваться на вход обработчика одним и тем же потоком, то
и в этом случае использовать внешний вызов внутри границ блокировки нельзя.
Так как это делает схему уязвимой для дедлоков по уже описанным причинам -
теряется контроль последовательности блокировок. В таких случаях для сохранения
исходной последовательности обовлений следует использовать очередь.

В общем случае правило следующее - следует всегда избегать внешних вызовов
внутри границ блокировки на базе локального монитора. Локальный монитор должен
использоваться только для контроля локальных данных. Не следует забывать, что
при реализации некоторых архитектурных паттернов методы внешних объектов могут
вызываться неявно. В частности это касается паттерна Observer. То есть выполнять
notifyObservers внутри блокировки также чревато появлением дедлоков.

--------------------------------------------------------------------------------
- Мультипоточная обработка (Источники данных)

Использование нескольких источников данных, обрабатываемых в параллельных
потоках, почти наверняка приведет к проблемам при совместном доступе к
отдельному экземпляру терминала, который сам по себе является объектом
блокировки. Вариантом решения проблемы может быть буфферизация данных,
поступающих из разных потоков, в виде единой очереди, с последующей подачей их
в терминал.

--------------------------------------------------------------------------------
- Мультипоточная обработка и синхронная обработка событий

Синхронную обработку событий в многопоточных приложениях следует использовать
с большой осторожностью. В силу своей архитектуры, события позволяют неявно
осуществить обращение к любой части программы. Как правило разработка
сконцентрирована на небольших участках и в случае постепенного усложнения
механизма обработки и многочисленных рефакторингов достаточно легко потерять
контроль над ходом исполнения начиная с момента возникновения события и
заканчивая возвратом из обработчика. В конечном итоге, можно столкнуться с
ситуацией, когда в глубине вызовов по стеку работы синхронного обработчика будет
осуществлен вызов блокирующего метода, что приведет к полной блокировки очереди
событий. В виду сложности прогнозирования подобных ситуаций, следует избегать
использования синхронных обработчиков.

--------------------------------------------------------------------------------
- Новые типы заявок

Новые типы заявок можно зарегистрировать, используя соотвествующие фабричные
методы класса OrderType. Единственным обязательным требованием при регистрации
новых типов является наличие уникального строкового идентификатора типа. Если
нужно добавить несколько дополнительных типов для последующего использования в
целях идентификации по экземпляру, следует использовать следующий подход:

	static final OrderType newType = OrderType.registerType("NewTypeID");

При необходимости класс OrderType может быть расширен дополнительными свойствами
и методами. В этом случае следует использовать метод регистрации нового
типа с экземпляром в качестве аргумента:

	static class NewType extends OrderType {
		public static final NewType FOO;
		public static final NewType BUZ;
		
		static {
			OrderType.registerType(FOO = new NewType("FOO", 100));
			OrderType.registerType(BUZ = new NewType("BUZ", 200));
		}
		
		private final int myProp;

		protected NewType(String code, int myProp) {
			super(code);
			this.myProp = myProp;
		}
		
	}

Важно учитывать, что регистрация нового типа невозможна в случае дублирования
идентификатора. 

--------------------------------------------------------------------------------
- Новый класс заявки

В случае, когда базовой модели заявки недостаточно, класс заявки может быть
расширен путем наследования:

public class DLOrder extends OrderImpl {

	public DLOrder(EditableTerminal terminal, Account account, Symbol symbol, long id) {
		super(terminal, account, symbol, id);
	}
	
	public DLOrder(EditableTerminal terminal, Account account, Symbol symbol,
			long id, ContainerImpl.Controller controller)
	{
		super(terminal, account, symbol, id, controller);
	}

	public DLOrderState getState() {
		return (DLOrderState) getObject(DLOrderField.DL_STATE);
	}
	
}

Класс заявки должен иметь как минимум два конструктора, как указанно в примере
выше.

Для тестирования нового класса заявки можно использовать тест базовой
реализации:

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import ru.prolib.aquila.core.BusinessEntities.ContainerImpl;
import ru.prolib.aquila.core.BusinessEntities.OrderImplTest;

public class DLOrderTest extends OrderImplTest {
	private DLOrder order;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		OrderImplTest.setUpBeforeClass();
	}
	
	@Before
	public void setUp() throws Exception {
		super.setUp();
	}
	
	@Override
	protected ContainerImpl produceContainer() {
		prepareTerminal();
		setOrder(order = new DLOrder(terminal, account, symbol, 240));
		return order;
	}
	
	@Override
	protected ContainerImpl produceContainer(ContainerImpl.Controller controller) {
		prepareTerminal();
		setOrder(order = new DLOrder(terminal, account, symbol, 240, controller));
		return order;
	}

	@Test
	public void testGetState() throws Exception {
		getter = new Getter<DLOrderState>() {
			@Override public DLOrderState get() {
				return order.getState();
			}
		};
		testGetter(DLOrderField.DL_STATE, DLOrderState.NonActive, DLOrderState.Expired);
	}

}

Не забывайте вызывать метод setOrder(), что бы установить экземпляр заявки для
тестов базового класса.

Что бы сделать доступным класс теста в pom-файл проекта следует добавить
зависимость:

        <dependency>
        	<groupId>ru.prolib.aquila</groupId>
        	<artifactId>aquila-core</artifactId>
        	<version>0.1.43</version>
        	<type>test-jar</type>
        	<scope>test</scope>
        </dependency>

Для того, что бы определить новый класс заявки для терминала, следует
переопределить фабрику объектов:

public class DLObjectFactory extends ObjectFactoryImpl {

	@Override
	public EditableOrder createOrder(EditableTerminal terminal,
			Account account, Symbol symbol, long id)
	{
		return new DLOrder(terminal, account, symbol, id);
	}
	
}

и использовать ее при инстанцировании терминала. Например следующим образом:

	@Test
	public void testNewOrderClass() throws Exception {
		Terminal terminal = new BasicTerminalBuilder()
			.withDataProvider(new DataProviderStub())
			.withObjectFactory(new DLObjectFactory())
			.buildTerminal();
		
		DLOrder order = (DLOrder) terminal.createOrder(new Account("foo"),
				new Symbol("bar"), OrderAction.BUY, 10L, 84d);
		
		assertEquals(582, order.getMyProperty());
	}

--------------------------------------------------------------------------------
