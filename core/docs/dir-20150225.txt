Директива 20150225
[[[[ О стандартизации механизмов синхронных и асинхронных событий ]]]]

Основание

После реализации директивы 20141205 (О введении синхронных событий терминала)
было выявлено, что решение возникших проблем путем введения интерфейсов
синхронных обработчиков оказывает негативное влияние на дизайн системы.
Количество кейсов, когда нужно получить синхронную реакцию на событие, растет.
При этом растет количество изменений, в связи с реализацией синхронных
взаимодействий. При этом замечено, что текущий интерфейс событийной подсистемы
полностью удовлетворяет и поставщиков и потребителей.

Выявлено множество пограничных ситуаций, когда отношение к типу события
(синхронное или асинхронное) имеет разную значимость для участников процесса.
В некоторых случаях, поставщик хочет получить некую реакцию непосредственно
после рассылки событий (как в ситуации-основании директивы 20141205). С другой
стороны, многие алгоритмы могут быть легко реализованы, если потребитель имеет
возможность реагировать на событие непосредственно в момент его возникновения.
Сейчас в таких случаях иногда используется впрыск поставщику синхронной очереди,
но это так или иначе диктует дизайн поставщика и плохо влияет на дизайн. 

Конечно, в большинстве случаев поставщикам все равно, когда и кем будет
обработано событие. Так же как и большинству потребителей все равно когда было
отправлено событие. Но в некоторых случаях наличие возможности жестко определять
тип события при его создании для поставщика или подписываться на получение
события в синхронном режиме для потребителя значительно облегчает дело.
Сейчас подобной возможности нет.


--------------------------------------------------------------------------------

Подход 

В целях унификации работы с синхронными и асинхронными событиями предлагается
дополнить интерфейс событийной подсистемы возможностью указывать спецификации
доступных способов рассылки и способов их получения.


--------------------------------------------------------------------------------

Порядок редизайна

Наивысший приоритет при выборе доступных типов оповещений определяет владелец.
Происходит это в момент создания нового типа события. Если владелец требует,
чтобы все события данного типа отправлялись в синхронном режиме, то все
подписчики будут уведомляться в синхронном режиме, независимо от того, какой
способ доставки они предпочитают. Текущие фабричные методы по-умолчанию
инстанцируют тип события, допускающий любой желаемый подписчиком способ
доставки. Для создания типа события с ограничением по способу доставки только
синхронным способом владелец должен использовать специальный фабричный метод.

Нынешняя реализация метода подписки на тип события по-умолчанию определяет
подписчика в пул асинхронных получателей событий. Независимо от своего выбора,
подписчик попадает в пул синхронных получателей, если тип события был создан
с ограничением асинхронной подачи событий. Подписчик должен использовать
специальный метод подписки для получения событий в синхронном режиме.   

Основная сложность заключается в корректной организации трансляции событий
смешанным способом. Механизмы асинхронной и синхронной трансляции событий уже
отработаны и представлены отдельными реализациями очередей. Следует объединить
эти реализации в одну, после чего синхронную реализацию можно удалить как
более простую и редко используемую.

Вопрос, который требует детальной проработки это порядок трансляции асинхронных
событий. С синхронными нет вариантов - нужно транслировать события до тех пор,
пока очередь наполняется в текущем потоке например, в результате отправки новых
событий синхронными обработчиками. В противном случае принцип синхронности будет
нарушен. С асинхронными событиями возможны два варианта: можно начинать
асинхронную подачу после синхронной подачи каждого события или после синхронной
трансляции всех событий. Разница в том, что в первом случае не нужно ничего
кэшировать, но асинхронные события могут поступить в соответствующие обработчики
до того, как отработают все синхронные наблюдатели, что в принципе может
рассматриваться как нарушение последовательности. Во втором случае придется
кэшировать события для последующей асинхронной подачи, но при этом будет
гарантировано, что синхронные наблюдатели отработают действительно синхронно, до
того, как начнут отрабатывать асинхронные наблюдатели.  

???

Добавить служебный интерфейс типу события. Этот интерфейс должен обеспечивать
доступ к подписчикам. Из публичного интерфейса подобные методы необходимо
удалить.

Вместе с этим, необходимо удалить deprecated методы из всех компонентов системы
событий.
