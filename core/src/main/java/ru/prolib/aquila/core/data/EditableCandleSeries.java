package ru.prolib.aquila.core.data;

import java.time.Instant;
import ru.prolib.aquila.core.BusinessEntities.*;

/**
 * Интерфейс ряда свечей.
 * <p>
 * 2013-03-11<br>
 * $Id: EditableCandleSeries.java 566 2013-03-11 01:52:40Z whirlwind $
 */
@Deprecated
public interface EditableCandleSeries
		extends CandleSeries, EditableSeries<Candle>
{
	
	/**
	 * Агрегировать тик данных.
	 * <p>
	 * Строгая агрегация тика. Выбрасывает исключение при запросе агрегирования
	 * устаревших данных. Эквивалент вызова {@link #aggregate(Tick, boolean)}
	 * с false в качестве второго аргумента.
	 * <p>
	 * @param tick агрегируемый тик данных
	 * @throws OutOfDateException - If error occured.
	 */
	public void aggregate(Tick tick) throws OutOfDateException;
	
	/**
	 * Агрегировать тик данных.
	 * <p>
	 * Позволяет агрегировать в текущую свечи значение тиковых данных. Если
	 * последовательность пуста или время тика больше времени ТА, то будет
	 * создана новая свеча с соответствующим интервалом. После агрегирования
	 * ТА устанавливается на время тика.
	 * <p>
	 * @param tick агрегируемый тик данных
	 * @param silent при true тики данных датированные ранее ТА отбрасываются,
	 * при false будет возбуждено исключение
	 * @throws OutOfDateException - If error occured.
	 */
	public void aggregate(Tick tick, boolean silent)
		throws OutOfDateException;
	
	/**
	 * Агрегировать свечу.
	 * <p>
	 * Строгая агрегация свечи. Выбрасывает исключение при запросе агрегирования
	 * устаревших данных. Эквивалент вызова {@link #aggregate(Candle, boolean)}
	 * с false в качестве второго аргумента.
	 * <p>
	 * @param candle агрегируемая свеча
	 * @throws OutOfDateException устаревшая свеча
	 * @throws OutOfIntervalException свеча не вмещается в остаток интервала
	 * текущей свечи или интервал свечи превышает установленный таймфрейм
	 */
	public void aggregate(Candle candle) throws ValueException;
	
	/**
	 * Агрегировать свечу.
	 * <p>
	 * Агрегируемая свеча должна быть меньшего таймфрейма или соответствовать
	 * таймфрейму последовательности. Если агрегируемая свеча относится к
	 * интервалу последней свечи последовательности, то для агрегируемой должно
	 * быть достаточно места (временного интервала) в рамках текущей свечи. То
	 * есть, временной промежуток между ТА и временем окончания текущей свечи
	 * должен вмещать интервал агрегируемой свечи. Успешная агрегация смещает ТА
	 * на время окончания интервала агрегированной свечи. Если агрегируемая
	 * свеча относится к более позднему временному интервалу, то на основе нее
	 * создается новая свеча последовательности с соответствующим таймфреймом.
	 * ТА так же сдвигается на конец агрегированной свечи.
	 * <p>
	 * Следует учитывать, что для корректной агрегации свечей, таймфрейм 
	 * последовательности должен быть кратен таймфрейму агрегируемых свечей. То
	 * есть, старший таймфрейм дожен делиться на младший без остатка. Например,
	 * при таймфрейме последовательности 5 минут попытка агрегировать в
	 * трехминутные свечи приведет к пересечению интервала текущей свечи
	 * последовательности (на второй трехминутной свече, конец интервала которой
	 * выйдет за границы пятиминутки) и возбуждению исключения. Таким образом,
	 * попытка сформировать из трехминуток пятиминутные свечи завершится
	 * неудачей. Создать пятиминутки возможно из минутных свечек.
	 * <p>
	 * @param candle агрегируемая свеча
	 * @param silent при true свеча датированная ранее ТА будет отброшена,
	 * при false будет возбуждено исключение
	 * @throws OutOfDateException устаревшая свеча
	 * @throws OutOfIntervalException свеча не вмещается в остаток интервала
	 * текущей свечи или интервал свечи превышает установленный таймфрейм
	 */
	public void aggregate(Candle candle, boolean silent) throws ValueException;
	
	/**
	 * Агрегировать временную метку.
	 * <p>
	 * Фактически метод смещения ТА на более позднее время (в будущее). При
	 * запросе на смещение в прошлое возбуждается исключение. Эквивалент вызова
	 * {@link #aggregate(Instant, boolean)} с false в качестве второго
	 * аргумента.
	 * <p>
	 * @param time временная метка
	 * @throws OutOfDateException попытка смещения ТА в прошлое
	 */
	public void aggregate(Instant time) throws OutOfDateException;
	
	/**
	 * Агрегировать временную метку.
	 * <p>
	 * Метод осуществляет сдвиг ТА в будущее.
	 * <p>
	 * @param time временная метка (новая ТА)
	 * @param silent при true попытка сдвинут ТА в прошлое будет
	 * проигнорирована, при false будет возбуждено исключение
	 * @throws OutOfDateException попытка смещения ТА в прошлое
	 */
	public void aggregate(Instant time, boolean silent)
		throws OutOfDateException;
	
}
