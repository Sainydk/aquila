package ru.prolib.aquila.core;

/**
 * Интерфейс типа события.
 * <p> 
 * 2012-04-09<br>
 * $Id: EventType.java 513 2013-02-11 01:17:18Z whirlwind $
 */
public interface EventType {

	/**
	 * Подписаться на событие.
	 * <p>
	 * Подписывает на получение событий в асинхронном режиме. События будут
	 * транслироваться в синхронном режиме, если тип события ограничен только
	 * синхронным способом передачи.
	 * <p>
	 * Если указанный получатель ранее был подписан на события в синхронном
	 * режиме, повторная подписка с помощью этого метода переведет его в режим
	 * асинхронного получения событий.
	 * <p>
	 * @param listener получатель
	 */
	public void addListener(EventListener listener);
	
	/**
	 * Подписаться на событие.
	 * <p>
	 * Подписывает на получение событий в синхронном режиме. События будут
	 * транслироваться том же потоке, в котором были сгенерированы. Иначе
	 * говоря, этот тип подписки обеспечивает максимально быструю доставку
	 * событий. Но такой способ может негативно повлиять на работу поставщика
	 * событий.
	 * <p>
	 * Если указанный получатель ранее был подписан на события в асинхронном
	 * режиме, повторная подписка с помощью этого метода переведет его в режим
	 * синхронного получения событий.
	 * <p>
	 * @param listener
	 */
	public void addSyncListener(EventListener listener);

	/**
	 * Отписаться от события.
	 * <p>
	 * @param listener получатель
	 */
	public void removeListener(EventListener listener);
	
	/**
	 * Проверить наличие указанного получателя.
	 * <p>
	 * @param listener получатель
	 * @return результат проверки: true - если указанный получатель в списке
	 * наблюдателей данного типа, false - получатель не является наблюдателем
	 * события данного типа.
	 */
	public boolean isListener(EventListener listener);

	/**
	 * Подписаться на единичное событие.
	 * <p>
	 * Данный метод позволяет подписаться на первое поступившее событие данного
	 * типа. Перед получением события получатель автоматически отписывается от
	 * последующего получения событий данного типа.
	 * <p>
	 * @param listener получатель
	 * @return промежуточный обозреватель
	 */
	public EventListener listenOnce(EventListener listener);
	
}