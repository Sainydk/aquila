package ru.prolib.aquila.core.BusinessEntities;

/**
 * Пул заявок.
 * <p>
 * Пул заявок позволяет создавать произвольный аналитический срез заявок. Пул
 * предусматривает решение следующих задач:
 * <p>
 * 1) Любая заявка может быть проверена на принадлежность пулу, что может быть
 * использовано для фильтрации заявок или связанных с заявками данными (например
 * сделок).
 * <p>
 * 2) Пул может быть настроен на определенные умолчания (счет, инструмент), что
 * позволяет использовать более краткую форму создания заявки, чем это
 * предусмотрено интерфейсом терминала. Созданные заявки автоматически попадают
 * в пул.
 * <p>
 * 3) Пул разделяет заявки на категории и позволяет оперировать этими
 * категориями с помощью методов масс-обработки. Например, запустить в работу
 * все новые заявки или снять все активные заявки пула.
 */
public interface OrderPool {

	/**
	 * Запустить новые заявки в работу.
	 * <p>
	 * Данный метод обрабатывает список новых заявок с целью запуска в работу
	 * тех заявок, которые еще не запущены (то есть все заявки из списка
	 * ожидания в статусе {@link OrderStatus#PENDING}. При обработке все заявки
	 * в статусе ожидания передаются на обработку в метод терминала
	 * {@link Terminal#placeOrder(Order)} и в случае успеха, переносятся в
	 * список активных заявок. Заявки в статусе {@link OrderStatus#ACTIVE} или
	 * {@link OrderStatus#CONDITION} переносятся в список активных заявок без
	 * попытки повторной активации.
	 * <p>
	 * В случае возникновения исключения при попытке запустить заявку в работу
	 * методом {@link Terminal#placeOrder(Order)}, обработка списка ожидающих
	 * заявок прекращается. В случае необходимости, все ожидающие заявки могут
	 * быть сняты последующим вызовом {@link #cancelOrders()}. Заявка, на
	 * которой возник отказ, автоматически перенесется в категорию
	 * финализированных заявок. 
	 * <p>
	 * @throws OrderException 
	 */
	public void placeOrders() throws OrderException;

	/**
	 * Снять активные заявки.
	 * <p>
	 * Данный метод снимает все заявки, относящиеся к категории активных. Если
	 * на момент вызова в категории заявок есть финализированные заявки, то они
	 * игнорируются. Финализированные заявки автоматически переводятся в
	 * соответствующую категорию и не подразумевают дальнейшей обработки.
	 */
	public void cancelOrders();

	/**
	 * Установить счет по-умолчанию.
	 * <p>
	 * Данный метод устанавливает счет, который будет использован при вызове
	 * метода добавления заявки без указания счета.
	 * <p>
	 * @param account торговый счет
	 */
	public void setAccount(Account account);

	/**
	 * Установить инструмент по-умолчанию.
	 * <p>
	 * Данный метод устанавливает инструмент, который будет использован при
	 * вызове метода добавления заявки без указания инструмента.
	 * <p>
	 * @param security инструмент
	 */
	public void setSecurity(Security security);
	
	/**
	 * Получить рабочий терминал.
	 * <p>
	 * @return терминал
	 */
	public Terminal getTerminal();

	/**
	 * Получить счет по-умолчанию.
	 * <p>
	 * @return торговый счет или null, если счет по-умолчанию не задан 
	 */
	public Account getAccount();

	/**
	 * Получить инструмент по-умолчанию.
	 * <p>
	 * @return инструмент или null, если инструмент по-умолчанию не задан
	 */
	public Security getSecurity();
	
	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @return заявка
	 */
	public Order buy(long qty);
	
	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(long qty, String comment);

	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @return заявка
	 */
	public Order sell(long qty);
	
	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(long qty, String comment);

	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order buy(long qty, double price);
	
	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(long qty, double price, String comment);

	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order sell(long qty, double price);

	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию. Если счет либо инструмент не задан, то будет
	 * брошено исключение {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(long qty, double price, String comment);

	/**
	 * Добавить стоп-лимит на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию с акцивацией по условию достижения стоп-цены. Если
	 * счет или инструмент не задан, то будет брошено исключение
	 * {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order buy(long qty, double price, double stop);
	
	/**
	 * Добавить стоп-лимит на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку инструмента по-умолчанию
	 * и счету по-умолчанию с акцивацией по условию достижения стоп-цены. Если
	 * счет или инструмент не задан, то будет брошено исключение
	 * {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(long qty, double price, double stop, String comment);


	/**
	 * Добавить стоп-лимит на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию с акцивацией по условию достижения стоп-цены. Если
	 * счет или инструмент не задан, то будет брошено исключение
	 * {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order sell(long qty, double price, double stop);
	
	/**
	 * Добавить стоп-лимит на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу инструмента по-умолчанию
	 * и счету по-умолчанию с акцивацией по условию достижения стоп-цены. Если
	 * счет или инструмент не задан, то будет брошено исключение
	 * {@link IllegalStateException}.
 	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(long qty, double price, double stop, String comment);


	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку указанного инструмента
	 * с использованием счета по-умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @return заявка
	 */
	public Order buy(Security security, long qty);
	
	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку указанного инструмента
	 * с использованием счета по-умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Security security, long qty, String comment);

	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу указанного инструмента
	 * с использованием счета по-умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @return заявка
	 */
	public Order sell(Security security, long qty);
	
	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу указанного инструмента
	 * с использованием счета по-умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Security security, long qty, String comment);

	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty);
	
	/**
	 * Добавить рыночную заявку на покупку.
	 * <p>
	 * Создается экземпляр рыночной заявки на покупку указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty,
			String comment);

	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty);
	
	/**
	 * Добавить рыночную заявку на продажу.
	 * <p>
	 * Создается экземпляр рыночной заявки на продажу указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty,
			String comment);

	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием счета-по умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order buy(Security security, long qty, double price);
	
	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием счета-по умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Security security, long qty, double price, String comment);

	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием счета-по умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order sell(Security security, long qty, double price);
	
	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием счета-по умолчанию. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Security security, long qty, double price,
			String comment);

	/**
	 * Добавить стоп-лимит на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием счета по-умолчанию и активацией по условию достижения
	 * стоп-цены. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order buy(Security security, long qty, double price, double stop);
	
	/**
	 * Добавить стоп-лимит на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием счета по-умолчанию и активацией по условию достижения
	 * стоп-цены. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Security security, long qty, double price, double stop,
			String comment);

	/**
	 * Добавить стоп-лимит на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием счета по-умолчанию и активацией по условию достижения
	 * стоп-цены. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order sell(Security security, long qty, double price, double stop);

	/**
	 * Добавить стоп-лимит на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием счета по-умолчанию и активацией по условию достижения
	 * стоп-цены. Если счет по-умолчанию не задан, то
	 * будет брошено исключение {@link IllegalStateException}.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Security security, long qty, double price, double stop,
			String comment);
	
	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty,
			double price);
	
	/**
	 * Добавить лимитную заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty,
			double price, String comment);

	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty,
			double price);

	/**
	 * Добавить лимитную заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием указанного счета.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty,
			double price, String comment);

	/**
	 * Добавить стоп-заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием указанного счета и активацией заявки по условию
	 * достижения стоп-цены.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty,
			double price, double stop);
	
	/**
	 * Добавить стоп-заявку на покупку.
	 * <p>
	 * Создается экземпляр лимитной заявки на покупку указанного инструмента
	 * с использованием указанного счета и активацией заявки по условию
	 * достижения стоп-цены.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order buy(Account account, Security security, long qty,
			double price, double stop, String comment);

	/**
	 * Добавить стоп-заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием указанного счета и активацией заявки по условию
	 * достижения стоп-цены.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty,
			double price, double stop);

	/**
	 * Добавить стоп-заявку на продажу.
	 * <p>
	 * Создается экземпляр лимитной заявки на продажу указанного инструмента
	 * с использованием указанного счета и активацией заявки по условию
	 * достижения стоп-цены.
	 * <p>
	 * Созданная заявка относится к категории новых и должна быть размещена или
	 * отменена последующим вызовом соответственно {@link #placeOrders()} или
	 * {@link #cancelOrders()}.
	 * <p>
	 * @param account торговый счет
	 * @param security инструмент
	 * @param qty количество
	 * @param price цена
	 * @param stop стоп-цена
	 * @param comment комментарий
	 * @return заявка
	 */
	public Order sell(Account account, Security security, long qty,
			double price, double stop, String comment);

	/**
	 * Добавить заявку.
	 * <p>
	 * Данный метод позволяет добавить в пул произвольную заявку. Категория
	 * заявки определяется по ее статусу в момент вызова. Если это заявка
	 * в статусе ожидания, то она добавляется в список новых и должна быть
	 * размещена или отменена последующим вызовом соответственно
	 * {@link #placeOrders()} или {@link #cancelOrders()}. Если это уже
	 * размещенная заявка, то она определяется в категорию активных и может
	 * быть отменена. Финализированные заявки сразу определяются к категории
	 * завершенных. 
	 * <p>
	 * @param order заявка
	 * @return заявка-аргумент
	 */
	public Order add(Order order);
	
	/**
	 * Проверка принадлежности заявки пулу.
	 * <p>
	 * @param order проверяемая заявка
	 * @return true - заявка из пула, false - заявка не принадлежит пулу
	 */
	public boolean isPooled(Order order);
	
	/**
	 * Проверка новой заявки.
	 * <p>
	 * @param order заявка
	 * @return true - это новая заявка, false - не новая или не из пула 
	 */
	public boolean isPending(Order order);
	
	/**
	 * Проверка активной заявки.
	 * <p>
	 * @param order заявка
	 * @return true - активированная заявка, false - не активированная или не из
	 * пула 
	 */
	public boolean isActive(Order order);
	
	/**
	 * Проверка финализированной заявки.
	 * <p>
	 * @param order заявка
	 * @return true - заявка в финальном статуса, false - не в финальном или не
	 * из пула
	 */
	public boolean isDone(Order order);
	
}