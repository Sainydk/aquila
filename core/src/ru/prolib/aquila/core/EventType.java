package ru.prolib.aquila.core;

import java.util.List;

/**
 * Интерфейс типа события.
 * <p> 
 * 2012-04-09<br>
 * $Id: EventType.java 513 2013-02-11 01:17:18Z whirlwind $
 */
public interface EventType {

	/**
	 * Подписаться на событие.
	 * <p>
	 * @param listener получатель
	 */
	public void addListener(EventListener listener);

	/**
	 * Отписаться от события.
	 * <p>
	 * @param listener получатель
	 */
	public void removeListener(EventListener listener);
	
	/**
	 * Очистить список наблюдателей.
	 * <p>
	 */
	public void removeListeners();
	
	/**
	 * Проверить наличие указанного наблюдателя.
	 * <p>
	 * @param listener получатель
	 * @return результат проверки: true - если указанный получатель в списке
	 * наблюдателей данного типа, false - получатель не является наблюдателем
	 * события данного типа.
	 */
	public boolean isListener(EventListener listener);
	
	/**
	 * Получить идентификатор типа события.
	 * <p>
	 * Идентификатор позволяет отличать конкретный тип события среди множества
	 * других типов по уникальной строке. Идентификатор задается явно при
	 * создании объекта или назначается автоматически, если не указан.
	 * Предназначен для использования в отладочных целях.
	 * <p>
	 * @return строковый идентификатор
	 */
	public String getId();
	
	/**
	 * Подписаться на единичное событие.
	 * <p>
	 * Данный метод позволяет подписаться на первое поступившее событие данного
	 * типа. Перед получением события получатель автоматически отписывается от
	 * последующего получения событий данного типа.
	 * <p>
	 * @param listener получатель
	 * @return промежуточный обозреватель
	 */
	public EventListener once(EventListener listener);
	
	/**
	 * Получить количество наблюдателей.
	 * <p>
	 * @return количество наблюдателей
	 */
	public int countListeners();
	
	/**
	 * Получить список наблюдателей.
	 * <p>
	 * @return копия текущего списка получателей
	 */
	public List<EventListener> getListeners();
	
	/**
	 * Сравнить списки наблюдателей.
	 * <p>
	 * Наблюдатели из разных списков считаются равными, если указывают на один
	 * и тот же экземпляр. Количество и порядок следования наблюдателей в
	 * списках так же учитывается.  
	 * <p>
	 * @param other другой тип события
	 * @return true, если списки наблюдателей совпадают, иначе false
	 */
	public boolean compareListeners(EventType other);

}