package ru.prolib.aquila.core.BusinessEntities;


/**
 * Интерфейс редактируемого инструмента торговли.
 * <p>
 * Данный интерфейс предназначен для использования поставщиками сервисов
 * и определяет методы изменения текущего состояния инструмента.
 * <p>
 * 2012-06-11<br>
 * $Id: EditableSecurity.java 388 2012-12-30 12:58:15Z whirlwind $
 */
public interface EditableSecurity extends Security, Editable {
	
	/**
	 * Установить минимальный размер лота.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value размер лота
	 */
	public void setLotSize(int value);
	
	/**
	 * Установить последнюю цену.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value значение последней цены
	 */
	public void setLastPrice(Double value);
	
	/**
	 * Установить верхний лимит цены.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value лимит цены
	 */
	public void setMaxPrice(Double value);
	
	/**
	 * Установить нижний лимит цены.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value лимит цены
	 */
	public void setMinPrice(Double value);

	/**
	 * Установить стоимость минимального шага цены.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value стоимость шага цены
	 */
	public void setMinStepPrice(Double value);
	
	/**
	 * Установить величину минимального шага цены
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value величина шага цены
	 */
	public void setMinStepSize(double value);
	
	/**
	 * Установить точность цены в десятичных знаках после запятой.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value точность цены
	 */
	public void setPrecision(int value);
	
	/**
	 * Генерировать событие о получении новой сделки по инструменту.
	 * <p>
	 * Указанная сделка устанавливается в качестве последней по инструменту.
	 * <p>
	 * @param trade сделка
	 */
	public void fireTradeEvent(Trade trade);
	
	/**
	 * Установить наименование инструмента.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value наименование
	 */
	public void setDisplayName(String value);
	
	/**
	 * Установить лучшую цену предложения.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value цена
	 */
	public void setAskPrice(Double value);
	
	/**
	 * Установить размер предложения.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value размер предложения
	 */
	public void setAskSize(Long value);
	
	/**
	 * Установить лучшую цену спроса.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value цена
	 */
	public void setBidPrice(Double value);
	
	/**
	 * Установить размер спроса.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value размер спроса
	 */
	public void setBidSize(Long value);
	
	/**
	 * Установить цену открытия последней сессии.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value цена открытия
	 */
	public void setOpenPrice(Double value);
	
	/**
	 * Установить цену закрытия предыдущей сессии.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value цена закрытия
	 */
	public void setClosePrice(Double value);
	
	/**
	 * Установить максимальную цену сессии.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value максимальная цена
	 */
	public void setHighPrice(Double value);
	
	/**
	 * Установить минимальную цену сессии.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value минимальная цена
	 */
	public void setLowPrice(Double value);
	
	/**
	 * Установить статус инструмента.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param status статус инструмента
	 */
	public void setStatus(SecurityStatus status);
	
	/**
	 * Установить расчетную цену.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value цена
	 */
	public void setInitialPrice(Double value);
	
	/**
	 * Установить начальную маржу.
	 * <p>
	 * Если устанавливаемое значение отличается от текущего, то выставляется
	 * признак изменения объекта, после чего, вызов метода
	 * {@link EditableSecurity#hasChanged()} начинает возвращать true.
	 * <p>
	 * @param value маржа
	 */
	public void setInitialMargin(Double value);
	
}
