Планировщик-эмулятор

1) Введение 

Данный класс представляет собой компонент, позволяющий управлять
последовательностью воспроизведения последовательности событий, размещенных
на временной шкале. Путем замены стандартного планировщика терминала на данную
реализацию можно получить необходимый контроль над скоростью исполнения
последовательности событий, представляющей работу терминала. Подобная эмуляция
востребована в ходе проведения исследований или отладки отдельных компонентов
торговой системы.

2) Основные понятия

Все события группируются по времени исполнения, образуя для каждого момента
времени слот событий. События, входящие в состав слота, исполняются в порядке
их регистрации.

В процессе эмуляции используются два ключевых понятия: скорость воспроизведения
и режим исполнения. Скорость воспроизведения определяет скорость движения
эмулятора по временной шкале. Нулевая скорость означает пошаговое движение без
задержек между смежными событиями. При такой скорости исполнение следущего
события наступает сразу после исполнения очередного. Единичная скорость означает
реальное время исполнения. При этом исполнение следующего события наступает
после паузы, размер которой определяется разницей во времени между очередным
событием и следующим. Иначе говоря, в таком режиме эмулятор работает приближенно
к планировщику реального времени исполнения. Значения скорости воспроизведения
больше единицы указывают на ускоренное воспроизведение последовательности
событий. Вторая скорость воспроизведения указывает на удвоенную скорость, третья
на утроенную и т.д. 

Режим исполнения определяет порядок действий эмулятора при передвижении по
временной шкале. Из любого режима возможно осуществить перевод планировщика в
другой режим путем подачи соответствующей команды.

3) Режимы исполнения

Режимы исполнения:
3.1) WAIT - режим ожидания смены режима
3.2) RUN_STEP - выполнить следущющий слот событий с постановкой на паузу после
исполнения. В случае исполнения, сместить время на время исполненного
события. В случае отсутствия событий сразу встать на паузу без смещения
времени. При скорости более нуля выполняется эмуляция задержки между текущим
временем планировщика и временем слота.
3.3) RUN_CUTOFF - выполнять слоты событий до отсечки с постановкой на паузу. В
случае отсутствия событий сместить текущее время на время отсечки и встать на
паузу. При скорости более нуля выполняется эмуляция задержек между текущим
временем планировщика и временем очередного слота.
3.4) RUN - выполнять события с перемещением по шкале с установленной скоростью
или ждать событий при нулевой скорости. Автоматический выход из этого режима не
предусмотрен.
3.5) CLOSE - работа завершена

4) Дополнительные операции

4.1) Сместить текущее время вперед
4.2) Сместить текущее время назад с удалением всех зарегистрированных событий
4.3) Завершить работу

5) Внутреннее состояние планировщика

Внутреннее состояние планировщика важно с точки зрения управления процессом
воспроизведения событий. Моменты перехода из одного состояния в другое
осуществляется путем отслеживания служебных событий планировщика. Возможные
состояния планировщика:

5.1) PAUSED - планировщик в состоянии ожидания смены режима
5.2) RUNNING - планировщик в режиме исполнения последовательности
5.3) CLOSED - планировщик закрыт

6) Важные детали

6.1) Управление должно выполняться только посредством блокирующей очереди, так как
она позволяет выполнять ожидание данных с полной блокировкой или блокировкой с
таймаутом. Полная блокировка требуется для реализации режима нулевой скорости,
а блокировка с таймаутом - для организации перемещения по временной шкале
пропорционально реально-прошедшему времени (скорости больше нуля).  

6.2) Необходимо обеспечить возможность получения списка запланированных задач.

7) Воркер планировщика

Воркер планировщика запускается в отдельном треде с идентификатором, переданным
в конструктор планировщика при его создании. Это позволяет различать потоки
планировщиков, в случае использования двух и более экземпляров. Посредством
интерфейса шедулера путем проталкивания через очередь в воркер подаются команды.
Цикл работы воркера состоит из нескольких этапов:

7.1) Обработки очереди команд;
7.2) Исполнение слотов, датированных текущим или более ранним временем;
7.3) Определение целевого времени и сдвиг текущего времени.

Более подробно об этапах.

7.1) Извлечение команд из очереди. На этом этапе из очереди извлекаются все
команды, до тех пор, пока очередь не опустеет. Команды управления приводят к
смене текущего режима работы или скорости воспроизведения, которые возымеют
эффект на последующих этапах и по этому не требуют немедленной реакции. Новые
задачи разбираются и помещаются в соответствующие слоты. Фактически, разбор
команд очереди выполняется обособленно и не связан напрямую с процессом
выполнения задач. Кроме того, команда может быть "случайно" извлечена во время
обращений к очереди с целью получения блокировки на определенное время. Такая
команда обрабатывается обычным образом, не влияя на ход текущего цикла. 

7.2) Переход к исполнению слотов осуществляется только в случае, если
планировщик находится в режимах RUN_STEP, RUN_CUTOFF или RUN. На данном этапе во
внутреннем хранилище разыскивается слот, датированный наиболее ранним временем
исполнения, которое при этом меньше или равно текущему времени планировщика.
Если такой слот существует, то все его задачи запускаются на исполнение. В
процессе выполнения заданий в очередь команд могут быть добавлены новые задачи.
Однако эти новые задачи никак не повлияют на работу в данном цикле. После
исполнения слота, периодические задачи регистрируются в соответствующих более
поздних слотах, а единовременные задачи удаляются. После выполнения задач,
процесс переходит в начало цикла, то есть в очередной раз осуществляется
обработка очереди команд. В режиме RUN_STEP перед тем, как перейти к началу
цикла планировщик переводится в режим WAIT (только в случае исполнения задач
слота). 

7.3) На последний третий этап воркер заходит только в случае, когда не было
слотов пригодных для исполнения (то есть, датированных временем равным или
меньшим текущего времени планировщика). Здесь возможно несколько вариантов
развития событий в зависимости от текущих настроек планировщика.

7.3.a) В режиме RUN_STEP в качестве целевого времени выбирается время
ближайшего слота. Если очередь не содержит слотов, то планировщик переводится в
режим WAIT.
7.3.б) В режиме RUN_CUTOFF если текущее время соответствует времени отсечки,
то планировщик переводится в режим WAIT. Иначе в качестве целевого времени
берется время ближайшего слота или установленное время отсечки, в зависимости
что раньше. Если ближайший слот отсутствует, то берется время отсечки. 
7.3.в) В режиме RUN в качестве целевого времени берется время ближайшего
слота. 

Если целевое время определено, осуществляется попытка сдвига текущего времени.
При нулевой скорости воспроизведения выполняется простая установка целевого
времени в качестве текущего.

При скорости исполнения больше нуля текущее время может быть установлено в
определенное промежуточное значение, которое рассчитывается следующим образом.
Разница между текущим временем и целевым временем уменьшается пропорционально
скорости исполнения (целевая разница). Для скорости 1 это будет исходная
разница, для скорости 2 - будет взята половина от исходного значения, для
скорости 3 - одна третья и т.д. Минимальный квант - это промежуток времени,
который используется планировщиком для промежуточных сдвигов, когда до
очередного слота слишком далеко по шкале времени, а планировщик работает в
режимах, от которых ожидается постоянное константное приращение времени. Итак,
берется наименьшая величина из минимального кванта и целевой разницы.
Планировщик входит в режим ожидания на целевую разницу, после чего выполняет
приращение целевой разницы к текущему времени планировщика. После этого,
осуществляется переход на начало цикла. При повторении подобной процедуры будет
создаваться впечатление, что время планировщика плавно движется вперед, в
соответствии с реальным ходом времени.

Здесь есть один ньюанс. Режим ожидания осуществляется путем блокирующего вызова
метода извлечения очередной команды из очереди команд. В результате этого вызова
могут быть два варианта: извлечение команды или таймаут. В случае таймаута
никаких дополнительных действий не требуется. Однако извлечение команды требует
ее обработки. Кроме того, в случае поступления команды, время прошедшее с начала
ожидания будет меньше. В принципе, если значение минимального кванта в пределах
долей секунд, а количество таких прерывающих команд невелико, то большой
погрешности не образуется и можно продолжать работу, как буд-то вызов завершился
по таймауту. Однако эту тонкость необходимо запомнить. Это потенциальное место
для будущей оптимизации с целью повышения точности.
