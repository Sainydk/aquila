
v1 (ред. 2014-06-10-001)

Эмулятор фьючерсов - минимально-необходимый набор компонентов, позволяющий
стандартным способом инстанцировать терминал, настраивать и выполнять эмуляцию
работы торгового терминала на основе потока сделок. Результатом должна стать
такая реализация терминала, которая позволит выполнять тестовый прогон
имеющейся стратегии dts5atr.

* Настройки терминала: добавление/редактирование портфелей, выбор РП, кнопки
запуска/паузы/останова/шага процесса эмуляции.
Готовность 100%.

* Хранилище тиковых данных. Требуется в двух видах: потоковом и с позицированием
по временной метке.
Готовность 100%.

* Эмулятор инструмента - по запросу инструмента выполняет поиск и, в случае
доступности котировок внутри РП, регистрацию инструмента в терминале. Выполняет
трансляцию сделок в процессе эмуляции.
Готовность 100%.
	
* Эмулятор портфеля FORTS - в процессе эмуляции выполняет расчет параметров
открытых позиции, суммирование вариационной маржи по позициям, клиринг.
Готовность 100%.

* Эмулятор исполнения заявок.
Готовность 100%.


--------------------------------------------------------------------------------
   2015-01-11
   Трекинг позиции. В позиции есть такие атрибуты: вариационка, балансовая и
   рыночная стоимости. По сути, достаточно иметь значения только двух из этих
   атрибутов, что бы расчитать значение третьего. Таким образом, поставщики
   данных могут работать гибко, исходя из тех данных, которые им фактически
   доступны через подключение к некой удаленной системе. Отсюда так же следует,
   если вариационка сбрасывается в каждый клиринг, то и все остальное
   пересчитывается в этот же момент. Это значит, что нам не нужно дополнительных
   усилий для учета себестоимости позы в процессе трекинга поз. Себестоимость
   позы будет пересчитываться в каждый клиринг.
   
   Однако, следует более подробно рассмотреть ситуацию, когда поза открывается
   внутри сессии. Что нам важно на момент закрытия (сокращения) позы и на момент
   очередного клиринга? 
   

   2015-01-06
   Примечания:
   - По клирингу. Регистрацию задачи на клиринг делать через спец контроллер.
   Контроллер клиринга группирует процедуры по времени. При запросе на клиринг
   по указанному времени, регистрирует себя в планировщике. В процессе работы,
   контроллер последовательно вызывает зарегистрированные процедуры клиринга,
   удаляет стек, затем выполняет post-clearing. Походу нужен аргумент, так как
   время на момент отработки может быть другое. Еще как вариант, чтобы не
   дублировать функционал планировщика, декорировать процедуры и использовать
   аналог CountDownLatch для определения момента запуска post-clearing
   процедуры.
   - По портфелям и позам. Для хранения доп атрибутов по позе, использовать позу
   как ключ.
   - По процессору заявок. Заявки OrderProcessor трекает сделки. При исполнении
   (тут подумать) передает хендлеру инструмента для изменения позы.
   Следовательно, реестр хендлеров таки нужен.
   - ??? Параметры позы нужно пересчитывать регулярно. Делать это нужно там, где
   клиринг (то есть в хендлере инструмента PS. зачем? забыл уже) 
   
   2014-09-30
   Проблема: Спихивание задачи по определению опорных данных на пользователей
   терминала через использование requestSecurity не представляется эффективным
   решением.
   1) Если предположить, что requestSecurity должна вызываться стратегией
   в момент встречи с терминалом до его запуска, не факт, что терминал будет
   в валидном состоянии. Конкретно для probe в этот момент не будет доступен
   валидный РП, так как обычно он будет установлен через UI позже, уже после
   создания всех необходимых объектов. Не имея доступа к ТА терминала,
   стратегия не сможет выполнить например определение текущего фьючерса. 
   2) Если предположить, что requestSecurity должна вызываться в момент
   обработки события OnStarted терминала, то проблема может быть решена путем
   добавления контрольного наблюдателя в конец очереди. Однако в данном случае
   алгоритм будет опираться на предположение, что наблюдатели получают
   уведомления в той последовательности, в которой они были зарегистрированы.
   Однако, гарантировать это нельзя - событийная система не имеет никаких
   установок на этот счет.
   3) Есть идея регистрировать некие клиентские хендлеры, которые терминал
   сможет синхронно дернуть в наиболее подходящий момент. Некоторые события
   можно продублировать в этих обработчиках. Очевидный минус такого подхода
   заключается в наличии потенциальных проблем в случае некорректной реализации
   обработчика. Например, обработчик может осуществить блокирующий вызов и
   повесить всю работу. Однако на фоне того, что с таким же успехом любой
   обозреватель может подвесить таким же образом поток диспетчеризации событий и
   все опять-же встанет колом, данный варинт выглядит вполне приемлимым.
   
   2014-10-08
   Тест-План функциональный тест терминала-эмулятора по фьючам FORTS.
   *) Планировщик в составе терминала работает; Время при срабатывании задачи
   гарантированно не меньше установленного для задачи.
   *) Приводит к генерации сделок по инструменту;
   *) Изменяет атрибуты инструмента HighPrice, LastPrice,
   LastTrade, LowPrice, OpenPrice, ClosePrice, DisplayName, 
   *) По вечернему клирингу пересчитываются атрибуты инструмента MaxPrice,
   MinPrice (а как упор в планки разруливать?), MinStepPrice.
   *) Системные события.
   *) Портфель и позы...
   *) Заявки...
   *) PROFIT
 